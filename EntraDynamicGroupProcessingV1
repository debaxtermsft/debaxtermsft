#######################
<# Written by Derrick Baxter debaxter@microsoft.com
 the below script uses the Azure Graph powershell module to pause/start all or selected dynamic groups

 8/2/24
 debaxter@microsoft.com

Using Powershell microsoft.graph
This script will provide a windows interface to Start/Pause all/selected(multi-select) Dynamic Group Processing
Export of Dynamic Groups currently paused added for records/backup
##########################
IMPORTANT!!!

To consent for users to run this script a global admin will need to run the following
-------------------------------------------------------------------------------------------
$sp = get-mgserviceprincipal | ?{$_.displayname -eq "Microsoft Graph"}
$resource = Get-MgServicePrincipal -Filter "appId eq '00000003-0000-0000-c000-000000000000'"
$principalid = "users object id"
$scope1 ="group.readwrite.all"
$scope2 ="directory.read.all"

$today = Get-Date -Format "yyyy-MM-dd"
$expiredate1 = get-date
$expiredate2 = $expiredate1.AddDays(365).ToString("yyyy-MM-dd")
$params = @{
    ClientId = $SP.Id
    ConsentType = "Principal"
    ResourceId = $resource.id
    principalId = $principalid
    Scope = "$scope1" + " " + "$scope2"
    startTime = "$today"
    expiryTime = "$expiredate2"

}

$InitialConsented = New-MgOauth2PermissionGrant -BodyParameter $params
-------------------------------------------------------------------------------------------
#>

#save file function window
[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Drawing") 
[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") 
function select-directory([string] $initialDirectory, $filename)
    {
        $tdy = get-date -Format "MM-dd-yyyy hh.mm.ss"
        $outputfile = $filename + $tdy +".csv"
        $SaveFileDialog = New-Object windows.forms.savefiledialog  
        $SaveFileDialog.FileName = $outputfile 
        $SaveFileDialog.initialDirectory = $initialDirectory
        $SaveFileDialog.title = "Save File to Disk"
        $SaveFileDialog.filter = "AzureADGroupExportCSV | Azure AD Group Export *.csv|Comma Seperated File|*.csv | All Files|*.* " 
        $SaveFileDialog.ShowHelp = $True   

        $result = $SaveFileDialog.ShowDialog((New-Object System.Windows.Forms.Form -Property @{TopMost = $true; TopLevel = $true}))
        
        if($SaveFileDialog.Filenames -eq "" ) 
            {
             #   write-host "Its not Null" 
                exit
            } 
        else
            {
                $x = $SaveFileDialog.Filename  
            }
        return $x
    } 
#selection UI
function select-group ($grouptype, $selectType, $groupselect, $multivalue)
    {
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing

    $form = New-Object System.Windows.Forms.Form
    $form.Text = 'Select ' + $selectType
    $form.Size = New-Object System.Drawing.Size(400,400)
    $form.StartPosition = 'CenterScreen'
    $form.Top = $true
    $form.TopMost = $true

    $okButton = New-Object System.Windows.Forms.Button
    $okButton.Location = New-Object System.Drawing.Point(200,330)
    $okButton.Size = New-Object System.Drawing.Size(75,23)
    $okButton.Text = 'OK'
    $okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
    $form.AcceptButton = $okButton
    $form.Controls.Add($okButton)

    $cancelButton = New-Object System.Windows.Forms.Button
    $cancelButton.Location = New-Object System.Drawing.Point(275,330)
    $cancelButton.Size = New-Object System.Drawing.Size(75,23)
    $cancelButton.Text = 'Cancel'
    $cancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    $form.CancelButton = $cancelButton
    $form.Controls.Add($cancelButton)

    $label = New-Object System.Windows.Forms.Label
    $label.Location = New-Object System.Drawing.Point(20,20)
    $label.Size = New-Object System.Drawing.Size(265,20)
    $label.Text = 'Select 1 or more ' + $selectType
    $form.Controls.Add($label)

    $listBox = New-Object System.Windows.Forms.ListBox
    $listBox.Location = New-Object System.Drawing.Point(60,60)
    $listBox.Size = New-Object System.Drawing.Size(365,60)
    $listBox.Height = 375
    if($multivalue)
    {
        $label.Text = $selectType 
    }
    else
    {
        $label.Text =  $selectType + ' Click One Item '
    }
    $form.Controls.Add($label)

    $listBox = New-Object System.Windows.Forms.ListBox
    $listBox.Location = New-Object System.Drawing.Point(10,50)
    $listBox.Size = New-Object System.Drawing.Size(365,20)
    $listBox.Height = 200
    
    if($multivalue)
        {
            $listBox.SelectionMode = 'MultiExtended'
        }

    foreach ($item in $grouptype)
        {
            [void] $listBox.Items.Add($item)
        }
    foreach ($item in $groupselect)
        {
            [void] $listBox.Items.Add($item)
        }

    $form.Controls.Add($listBox)
    $form.Topmost = $true
    $result = $form.ShowDialog()
    if ($result -eq [System.Windows.Forms.DialogResult]::OK)
        {
            $x = $listBox.SelectedItems
        }
    elseif ($result -eq [System.Windows.Forms.DialogResult]::Cancel)
        {
            exit
        }
    return $x
    } # end function select-app

    #start
$cloudmenu        = @("Global","USGov","USGovDoD","China","Germany")
$CloudQuestion  =  select-group -grouptype $cloudmenu -selectType "Select Cloud to Signin"

try
    {
    Get-MGDomain -ErrorAction Stop > $null
    }
catch
    {
    Connect-MgGraph -Scopes "group.readwrite.all, directory.read.all" -NoWelcome -Environment $CloudQuestion
    }
    $MainMenuQuestion  =@()
    $groupquestion =@()
    $GDisabled =@()
do
{
    $group  =@()
    $mainmenu        = @("Start All", "Pause All","Start Select", "Pause Select","Export Paused Groups")
    $MainMenuQuestion  =  select-group -grouptype $mainmenu -selectType "Select Dynamic Groups to Change Processing State"

    switch -exact ($MainMenuQuestion) 
    {
        "Cancel" {exit}
        #Export Paused Dynamic Groups
        "Export Paused Groups"
        {
            $group = get-mggroup -all -property id, displayname, MembershipRuleProcessingState | Select-Object displayname, id, MembershipRuleProcessingState | Where-Object{$_.MembershipRuleProcessingState -like "Pause*"} | sort-object DisplayName
            foreach($item in $group)
            {
                $GDisabled += New-Object Object |
                    Add-Member -NotePropertyName Group_DisplayName -NotePropertyValue $Item.DisplayName -PassThru |
                    Add-Member -NotePropertyName Group_ID -NotePropertyValue $item.id -PassThru |
                    Add-Member -NotePropertyName MembershipRuleProcessingState -NotePropertyValue $item.MembershipRuleProcessingState -PassThru 
            }
            $file = $MainMenuQuestion +"_"
            $OutputFile = select-directory -filename $file -initialDirectory $env:HOMEDRIVE
            if ($OutputFile -eq "Cancel"){exit}
            $GDisabled | export-csv -Path $OutputFile -NoTypeInformation -Force -Encoding UTF8
        }
        #Pausing all dynamic group processing
        "Pause All"
        {
            $group = get-mggroup -All -property id, displayname, MembershipRuleProcessingState | Select-Object displayname, id, MembershipRuleProcessingState | Where-Object{$_.MembershipRuleProcessingState -like "On*"} | sort-object DisplayName
            foreach($item in $group)
            {
                write-host "Pausing Group " $item.id " Name " $item.displayname
                Update-MgGroup -MembershipRuleProcessingState paused -GroupId $item.id
            }
        }
        # Start/Unpause ALL Dynamic Groups
        "Start All"
        {
            $group = get-mggroup -all -property id, displayname, MembershipRuleProcessingState | Select-Object displayname, id, MembershipRuleProcessingState | Where-Object{$_.MembershipRuleProcessingState -like "Pause*"} | sort-object DisplayName
            foreach($item in $group)
            {
                write-host "Starting Group " $item.id " Name " $item.displayname
                Update-MgGroup -MembershipRuleProcessingState On -GroupId $item.id
            }
        }
        #"Pause Select Dynamic Group Processing"
        "Pause Select"
        {
            $group = get-mggroup -all -property id, displayname, MembershipRuleProcessingState | Select-Object displayname, id, MembershipRuleProcessingState | Where-Object{$_.MembershipRuleProcessingState -like "On"} | sort-object DisplayName
            $groupselect = ($group).displayname
            $groupquestion =  select-group -grouptype $groupselect -selectType "Select Group to Pause"  -multivalue $true
            $found =@()
            foreach($item in $groupquestion) 
                { 
                    $found += $group | Where-Object{$_.displayname -like $item}
                }
            foreach ($item2 in $found)
                {
                    write-host "Pausing Group " $item2.id " Name " $item2.displayname
                    update-MgGroup -MembershipRuleProcessingState Paused -GroupId $item2.id
                }

        }
        #"Start Dynamic Group Processing"
        "Start Select"
        {
            $group = get-mggroup -all -property id, displayname, MembershipRuleProcessingState | Select-Object displayname, id, MembershipRuleProcessingState | Where-Object{$_.MembershipRuleProcessingState -like "Pause*"} | sort-object DisplayName
            $groupselect = ($group).displayname
            $groupquestion =  select-group -grouptype $groupselect -selectType "Select Group to Start"  -multivalue $true
            $found =@()
            foreach($item in $groupquestion) 
                { 
                    $found += $group | Where-Object{$_.displayname -like $item}
                }
            foreach ($item2 in $found)
                {
                    write-host "Starting Group " $item2.id " Name " $item2.displayname
                    update-MgGroup -MembershipRuleProcessingState On -GroupId $item2.id
                }
        }
    }
}
while ($MainMenuQuestion -ne "Cancel")
